#!/bin/bash

# Delimiter
delimiter="----------------------------------------------------------------"

updatePacman() {
	# Update pacman config file
	lines=(33 37 92 93)
	for line in "${lines[@]}"; do
		sed -i "${line}s/^#//" /etc/pacman.conf
	done
	pacman -Syyu
}

installDependencies() {
	# Install dependencies for this script
	pacman --needed -S git p7zip wget
}

createUser() {
	# Create an user with a password and groups
	printf "%s\n" "${delimiter}"
	printf "| [+] Create user\n"
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	read -p "| [+] Create an username: " username
	# Create user with home directory
	useradd -m "${username}"
	printf "| [+] User \"%s\" created\n" "${username}"
	printf "| [+] Create password for %s\n" "${username}"
	# Create password
	passwd ${username}
	printf "| [+] Password for %s created\n" "${username}"
	read -p "| [+] Select groups to add user ${username} to: " groups
	# Add user to groups specified
	usermod -aG "${groups}" ${username}
	printf "| [+] User %s added to groups: %s\n" "${username}" "${groups}"
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	printf "| [+] User %s created\n" "${username}"
	printf "%s\n" "${delimiter}"
}

createDirectories() {
	# Create directories in HOME directory
	directories=(
		.local/bin/
		.local/share/fonts/
		Desktop/
		Downloads/
		Videos/Recordings/
		Pictures/Screenshots/
		Music/
		Documents/aur/
		Documents/git/
		Wine/
	)

	printf "%s\n" "${delimiter}"
	printf "| [+] Create directories for user %s\n" "${username}"
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	# Loop through directory list
	for dir in "${directories[@]}"; do
		printf "| [+] Creating directory %s\n" "${dir}"
		sudo -u "${username}" mkdir -p "/home/${username}/${dir}"
	done
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	printf "| [+] Directories for user %s created\n" "${username}"
	printf "%s\n" "${delimiter}"
}

cloneDotfiles() {
	# Clone dotfiles from my git repo
	cd "${root_dir}/Documents/git/"
	printf "%s\n" "${delimiter}"
	printf "| [+] Cloning dotfiles\n"
	printf "%s\n" "${delimiter}"

	sudo -u "${username}" git clone https://github.com/KostasEreksonas/dotfiles.git "dotfiles/"
}

installPackages() {
	# Install packages
	printf "%s\n" "${delimiter}"
	printf "| [+] Installing packages\n"
	printf "%s\n" "${delimiter}"
	cd "${root_dir}/Documents/git/dotfiles/package_lists/"
	while read line; do
		pacman --needed -S - < "${line}"
	done < <(find . -type f -name "*.txt" -exec basename {} \;)
	# Add user to docker and libvirt groups
	usermod -aG docker,libvirt "${username}"
}

installAUR() {
	# Install yay aur manager
	# Edit MAKEFLAGS to use all available threads for compiling AUR packages
	sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf

	# Info
	printf "%s\n" "${delimiter}"
	printf "| [+] Installing AUR packages\n"
	printf "%s\n" "${delimiter}"

	# Change to aur directory
	cd "${root_dir}/Documents/aur/"

	printf "%s\n" "${delimiter}"
	while read -u 3 package; do
		printf "| [+] Cloning %s\n" "${package}"
		sudo -u "${username}" git clone https://aur.archlinux.org/${package}.git
		cd "${package}/"
		printf "| [+] Installing %s\n" "${package}"
		sudo -u "${username}" makepkg -si
		cd "../"
	done 3< <(cat "${root_dir}/Documents/git/dotfiles/package_lists/aur/aur_packages.txt")
	printf "%s\n" "${delimiter}"
}

installFonts() {
	# Install custom fonts
	cd "${root_dir}/.local/share/fonts/"

	# Info
	printf "%s\n" "${delimiter}"
	printf "| [+] Downloading fonts\n"
	printf "%s\n" "${delimiter}"

	sudo -u "${username}" wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip
	sudo -u "${username}" 7z x Hack.zip
	sudo -u "${username}" rm Hack.zip
}

configureVim() {
	# Configure vim
	# Info
	printf "%s\n" "${delimiter}"
	printf "| [+] Configure neovim\n"
	printf "%s\n" "${delimiter}"

	# Create directories
	dirs=("autoload" "bundle" "colors")
	printf "%s\n" "${delimiter}"
	for dir in "${dirs[@]}"; do
		printf "| [+] Creating %s\n" "${dir}"
		sudo -u "${username}" mkdir "${root_dir}/.config/nvim/${dir}"
	done
	printf "%s\n" "${delimiter}"

	# Install Pathogen plugin manager
	printf "%s\n" "${delimiter}"
	printf "| [+] Installing pathogen\n"
	printf "%s\n" "${delimiter}"
	sudo -u "${username}" curl -LSso "${root_dir}/.config/nvim/autoload/pathogen.vim" https://tpo.pe/pathogen.vim

	# Install plugins
	declare -A plugins=(
		["nerdtree"]="preservim" \
		["vim-airline"]="vim-airline" \
		["vim-airline-themes"]="vim-airline" \
		["vim-colors-solarized"]="altercation" \
		["pear-tree"]="tmsvg"
	)

	for plugin in "${!plugins[@]}"; do
		printf "%s\n" "${delimiter}"
		printf "| [+] Installing %s\n" "${plugin}"
		printf "%s\n" "${delimiter}"
		sudo -u "${username}" git clone "https://github.com/${plugins[${plugin}]}/${plugin}.git" "${root_dir}/.config/nvim/bundle/${plugin}/"
	done

	printf "%s\n" "${delimiter}"
	printf "| [+] Plugins installed\n"
	printf "%s\n" "${delimiter}"
	printf "%s\n" "${delimiter}"
	printf "| [+] Installing color schemes\n"
	printf "%s\n" "${delimiter}"

	# Install colors
	# Solarized
	printf "%s\n" "${delimiter}"
	themes_solarized=(solarized8 solarized8_flat solarized8_high solarized8_low)
	for theme in "${themes_solarized[@]}"; do
		printf "| [+] Installing %s\n" "${theme}"
        sudo -u "${username}" wget https://raw.githubusercontent.com/lifepillar/vim-solarized8/master/colors/${theme}.vim -P "${root_dir}/.config/nvim/colors/"
    done

	# Gruvbox
    themes_gruvbox=(gruvbox8 gruvbox8_hard gruvbox8_soft)
    for theme in "${themes_gruvbox[@]}"; do
		printf "| [+] Installing %s\n" "${theme}"
        sudo -u "${username}" wget https://raw.githubusercontent.com/lifepillar/vim-gruvbox8/master/colors/${theme}.vim -P "${root_dir}/.config/nvim/colors/"
	done
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	printf "| [+] Neovim configured\n"
	printf "%s\n" "${delimiter}"
}

copyConfigs() {
	# Copy configuration files
	# Create .config directory if it does not exist
	if [[ -z "${root_dir}/.config/" ]]; then
		printf "%s\n" "${delimiter}"
		printf "| [+] Creating directory %s/.config/\n" "${root_dir}"
		printf "%s\n" "${delimiter}"
		sudo -u "${username}" mkdir -p "${root_dir}/.config/"
	fi

	printf "%s\n" "${delimiter}"
	printf "| [+] Copying configuration files\n"
	printf "%s\n" "${delimiter}"

	printf "%s\n" "${delimiter}"
	printf "| [+] Copying package configs\n"
	sudo -u "${username}" cp -r "${root_dir}/Documents/git/dotfiles/package_configs/*" "${root_dir}/.config/"
	sudo -u "${username}" cp "${root_dir}/.config/mutt/.mbsyncrc" "${root_dir}/"
	sudo -u "${username}" cp "${root_dir}/.config/mutt/.msmtprc" "${root_dir}/"

	printf "| [+] Copying .bashrc\n"
	sudo -u "${username}" cp "${root_dir}/Documents/git/dotfiles/.bashrc" "${root_dir}/.bashrc"

	printf "| [+] Copying Xorg configs\n"
	cp -r "${root_dir}/Documents/git/dotfiles/xorg.conf.d/" "/etc/X11/"

	printf "| [+] Copying system script configs\n"
	cp -r "${root_dir}/Documents/git/dotfiles/system_scripts/*" "/usr/local/bin/"

	printf "| [+] Copying pixmaps\n"
	cp -r "${root_dir}/Documents/git/dotfiles/pixmaps/*" "/usr/share/pixmaps/"
	printf "%s\n" "${delimiter}"

	# Configure vim
	configureVim
}

configurePass() {
	# Configure password manager to store passwords
	printf "%s\n" "${delimiter}"
	printf "| [+] Configuring password manager\n"
	printf "%s\n" "${delimiter}"

	# Change to home directory for the new user
	cd "${root_dir}"

	# Generate gpg key
	sudo -u "${username}" $(gpg --full-gen-key)

	# Initialize password store
	sudo -u "${username}" pass init k.ereksonas@gmail.com

	# Add password for email
	printf "%s\n" "${delimiter}"
	printf "| [+] Add password for email\n"
	printf "%s\n" "${delimiter}"
	sudo -u "${username}" pass add email

	# Add password for email_main
	printf "%s\n" "${delimiter}"
	printf "| [+] Add password for email_main\n"
	printf "%s\n" "${delimiter}"
	sudo -u "${username}" pass add email_main

	# Organize gpg keys to directories
	mkdir -p "${root_dir}/.password_store/mail/"
	sudo -u "${username}" mv "${root_dir}/.password_store/*.gpg" "${root_dir}/.password_store/mail/"

	printf "%s\n" "${delimiter}"
	printf "| [+] Configuring password manager - done\n"
	printf "%s\n" "${delimiter}"
}

configurePureline() {
	# Configure a pureline PS1 command prompt for bash
	printf "%s\n" "${delimiter}"
	printf "| [+] Configuring pureline\n"
	printf "%s\n" "${delimiter}"

	sudo -u "${username}" git clone https://github.com/chris-marsh/pureline.git "${root_dir}/Documents/git/pureline/"
	sudo -u "${username}" mkdir "${root_dir}/pureline/"
	sudo -u "${username}" cp -r "${root_dir}/Documents/git/pureline/segments/" "${root_dir}/pureline/"
	sudo -u "${username}" cp "${root_dir}/Documents/git/pureline/pureline/" "${root_dir}/pureline/"
	sudo -u "${username}" cp "${root_dir}/Documents/git/pureline/configs/powerline_full_256col.conf" "${root_dir}/.pureline.conf"

	printf "%s\n" "${delimiter}"
	printf "| [+] Configuring pureline - done\n"
	printf "%s\n" "${delimiter}"
}

#  ------
# | Main |
#  ------

# Update pacman config file
updatePacman

# Install dependencies
installDependencies

# Create an user
createUser

# Change to the new home directory
root_dir="/home/${username}"

# Create directories
createDirectories

# Clone dotfiles
cloneDotfiles

# Install packages
installPackages

# Install AUR packages
installAUR

# Install custom fonts
installFonts

# Copy configs
copyConfigs

# Configure pureline
configurePureline

# Configure password manager
configurePass
