#!/bin/sh

function dependencyName {
	# Get dependency name from the output of pacman -Qi
	# $1 - line with a dependency name in it
	# $2 - field number to cut
	echo $1 | cut -d ":" -f $2 | tr -d " "
}

function separateDeps {
	# Put installed and not installed dependencies into separate arrays
	# $1 - line with a dependency name in it
	# $2 - dependency name
	if [[ $1 =~ "[installed]" ]]; then
		installed+=($2)
	else
		missing+=($2)
	fi
}

# Change Internal Field Separator (IFS) to a newline
IFS_bak=$IFS
IFS=$'\n'

# Exit the script if no package name is provided
if [ -z $1 ]; then
	printf "Usage: get-deps <package-name>\n"
	exit 1
fi

# Put pacman -Qi output to an array
# f - flag for optional dependencies
while read -r line; do
	if [[ $line =~ "Optional Deps" ]]; then
		f=1
		package=$(dependencyName $line 2)
		separateDeps $line $package
	fi
	if [[ $line =~ "Required By" ]]; then
		f=0
	fi
	if [[ "$f" == "1" ]] && ! [[ $line =~ "Optional Deps" ]]; then
		package=$(dependencyName $line 1)
		separateDeps $line $package
	fi
done <<< $(pacman -Qi $1)

# Print packages that are installed
printf 'Packages installed: '
printf '%s ' "${installed[@]}"
printf "\n"

# If all optional dependencies are installed, print a message and finish execution
if [ -z ${missing[@]} ]; then
	printf "All optional dependecies are installed.\n"
elif [ -z $choice ]; then
	# Print packages that are not installed
	printf 'Packages not yet installed: '
	printf '%s ' "${missing[@]}"
	printf "\n"
	# Ask to install missing optional dependecies
	while true; do
		read -p "Do you want to install missing dependencies? [Y/N] " choice
		if [[ "$choice" == "Y" || "$choice" == "y" ]]; then
			if [[ $EUID != 0 ]]; then
				printf "You must run this script as root in order to install dependencies.\n"
				break
			else
				pacman --noconfirm -S ${missing[@]}
				break
			fi
		elif [[ "$choice" == "N" || "$choice" == "n" ]]; then
			break
		fi
	done
fi

# Restore Internal Field Separator (IFS)
IFS=$IFS_bak
