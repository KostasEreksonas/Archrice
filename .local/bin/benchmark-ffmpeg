#!/bin/sh

# Benchmark ffmpeg performance

# Delimiter
delimiter="------------------------------------------------------------------------------------------------------------"

getInfo() {
    # Get system info
	arch="$(uname -m)"
    os="$(grep -w ID /etc/os-release | cut -d "=" -f 2)"
	os="${os//\"/}"
	cpu="$(lscpu | grep "Model name" | cut -d ":" -f 2 | xargs)"
    cores="$(grep "cpu cores" /proc/cpuinfo | head -1 | cut -d ":" -f 2 | tr -d " ")"
    threads="$(grep -c processor /proc/cpuinfo)"
    min_freq="$(echo "$(lscpu | grep "CPU min" | cut -d ":" -f 2 | cut -d "." -f 1 | tr -d " ")/1000" | bc -l 2>/dev/null)"
    max_freq="$(echo "$(lscpu | grep "CPU max" | cut -d ":" -f 2 | cut -d "." -f 1 | tr -d " ")/1000" | bc -l 2>/dev/null)"
    memory="$(echo "$(grep MemTotal /proc/meminfo | cut -d ":" -f 2 | tr -d " kB")/1024/1024" | bc -l 2>/dev/null)"
    uptime="$(formatTime "$(cut -d " " -f 1 < /proc/uptime)")"
	gpus="$(lspci | grep -E 'VGA|3D' | cut -d ":" -f 3 | awk '{$1=$1;print}')"
    IFS=$'\n' read -d '' -r -a gpus <<<"$gpus" # Read found GPU's into an array

	# Print system info to screen
    printf "%s\n" "${delimiter}"
    printf "| [+] System info\n"
    printf "%s\n" "${delimiter}"
	printf "| [+] Architecture: %s\n" "${arch}"
    printf "| [+] OS: %s\n" "${os}"
    printf "| [+] CPU: %s\n" "${cpu}"
    printf "| [+] Cores: %s\n" "${cores}"
    printf "| [+] Threads: %s\n" "${threads}"
    printf "| [+] Min frequency: %0.2f GHz\n" "${min_freq:-NaN}"
	printf "| [+] Max frequency: %0.2f GHz\n" "${max_freq:-NaN}"
    printf "| [+] Memory: %.2f GB\n" "${memory:-NaN}"
    printf "| [+] Uptime: %s\n" "${uptime}"
	for (( i=0; i<"${#gpus[@]}"; i++ )); do
		if [[ "${gpus[${i}]}" =~ "NVIDIA" ]]; then
			string="${gpus[${i}]}"
			string="${string##*[}"
			string="${string%]*}"
			printf "| [+] GPU: %s\n" "${string}"
		fi
	done
    printf "%s\n" "${delimiter}"

	# Write system info to file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] System info\n";
		printf "%s\n" "${delimiter}";
		printf "| [+] Architecture: %s\n" "${arch}";
		printf "| [+] OS: %s\n" "${os}";
		printf "| [+] CPU: %s\n" "${cpu}";
		printf "| [+] Cores: %s\n" "${cores}";
		printf "| [+] Threads: %s\n" "${threads}";
		printf "| [+] Min frequency: %0.2f GHz\n" "${min_freq:-NaN}";
		printf "| [+] Max frequency: %0.2f GHz\n" "${max_freq:-NaN}";
		printf "| [+] Memory: %.2f GB\n" "${memory:-NaN}";
		printf "| [+] Uptime: %s\n" "${uptime}";
		for (( i=0; i<"${#gpus[@]}"; i++ )); do
			if [[ "${gpus[${i}]}" =~ "NVIDIA" ]]; then
				string="${gpus[${i}]}"
				string="${string##*[}"
				string="${string%]*}"
				if [[ "${string}" == "+" ]]; then
					printf "| [+] GPU: %s\n" "${gpus[${i}]}";
				else
					printf "| [+] GPU: %s\n" "${string}";
				fi
			fi
		done
		printf "%s\n" "${delimiter}";
	} >> "${result_file}"
}

showProgress() {
	# Show progress of benchmark iteration
	local tmp_file="${1}"

	# Get last line of tmp file
    line=$(sed 's/\r/\n/g' "${tmp_file}" | tail -1)

	# Update text
    text=$(echo "${line}" | awk '{print "| [+] " $0}')

	# Print newline at the end of an encode
	printf "%s" "${text}"
}

formatTime() {
    # Format time to <xx>h <xx>m <xx.xxx>s
    time="${1}"

	# Get seconds value
    seconds="${time%%.*}"
    if [[ -z "${seconds}" ]]; then seconds=0; fi
    miliseconds="${time##*.}"
    if [[ -z "${miliseconds}" ]]; then miliseconds=0; fi
	if [[ "${seconds}" -lt 60 ]]; then
        printf "%s.%s seconds\n" "${seconds}" "${miliseconds}"
    elif [[ "${seconds}" -ge 60 && "${seconds}" -lt 3600 ]]; then
        minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
        if [[ -z "${minutes}" ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
        if [[ -z "${seconds}" ]]; then seconds=0; fi
		if [[ "${minutes}" == 1 ]]; then
			printf "%s minute %s.%s seconds\n" "${minutes}" "${seconds}" "${miliseconds}"
		else
			printf "%s minutes %s.%s seconds\n" "${minutes}" "${seconds}" "${miliseconds}"
		fi
	elif [[ "${seconds}" -ge 3600 ]]; then
        hours=$(echo "${seconds}/3600" | bc -l | cut -d "." -f 1)
        if [[ -z "${hours}" ]]; then hours=0; fi
        seconds=$((${seconds}-3600*${hours}))
        minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
        if [[ -z "${minutes}" ]]; then minutes=0; fi
        seconds=$((${seconds}-60*${minutes}))
        if [[ -z "${seconds}" ]]; then seconds=0; fi
		if [[ "${hours}" == 1 ]] && [[ "${minutes}" == 1 ]]; then
			printf "%s hour %s minute %s.%s seconds\n" "${hours}" "${minutes}" "${seconds}" "${miliseconds}"
		elif [[ "${hours}" == 1 ]] && [[ "${minutes}" -gt 1 ]]; then
			printf "%s hour %s minutes %s.%s seconds\n" "${hours}" "${minutes}" "${seconds}" "${miliseconds}"
		elif [[ "${hours}" -gt 1 ]] && [[ "${minutes}" == 1 ]]; then
			printf "%s hours %s minute %s.%s seconds\n" "${hours}" "${minutes}" "${seconds}" "${miliseconds}"
		else
			printf "%s hours %s minutes %s.%s seconds\n" "${hours}" "${minutes}" "${seconds}" "${miliseconds}"
		fi
	fi
}

selectBenchmark() {
    # Select benchmark video to encode
    PS3="[+] Choose resolution: "
    resolutions=("320x180" "640x360" "480p" "720p" "1080p" "2160p")
    select resolution in "${resolutions[@]}"; do
        case "${resolution}" in
            "320x180")
				printf "%s\n" "${resolution}"
				break
                ;;
            "640x360")
				printf "%s\n" "${resolution}"
                break
                ;;
            "480p")
				printf "%s\n" "${resolution}"
                break
                ;;
            "720p")
				printf "%s\n" "${resolution}"
                break
                ;;
			"1080p")
				printf "%s\n" "${resolution}"
                break
                ;;
            "2160p")
				printf "%s\n" "${resolution}"
                break
                ;;
		esac
    done
}

defaultDir() {
	# Create default directories for benchmark
	if ! [[ -d "${default_directory}" ]]; then
		mkdir -p "${default_directory}"
		printf "%s\n" "${delimiter}"
		printf "| [+] Directory %s created\n" "${default_directory}"
		printf "%s\n" "${delimiter}"
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Directory %s exists\n" "${default_directory}"
		printf "%s\n" "${delimiter}"
	fi

	if ! [[ -d "${default_directory}/data/" ]]; then
		mkdir -p "${default_directory}/data/"
		printf "%s\n" "${delimiter}"
		printf "| [+] Directory %s/data/ created\n" "${default_directory}"
		printf "%s\n" "${delimiter}"
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Directory %s/data/ exists\n" "${default_directory}"
		printf "%s\n" "${delimiter}"
	fi

	# Change to default directory
	cd "${default_directory}"
}

download() {
	# Download video to encode
	# Change to data directory
	cd "data/"

	# Check if file already exists
	if [[ "${file##*.}" == "zip" ]]; then
		if [[ -f "${file%.*}" ]]; then c=1; fi
	elif [[ -f "${file}" ]]; then c=1; fi

	# Download file if it does not exist
	if [[ "${c}" == 1 ]]; then
		printf "%s\n" "${delimiter}"
		printf "| [+] %s exists\n" "${file}"
		printf "%s\n" "${delimiter}"
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Downloading %s\n" "${file}"
		printf "%s\n" "${delimiter}"
		curl -O "${url}"
		printf "%s\n" "${delimiter}"
	fi

	# Change to original directory
	cd "../"
}

unpack() {
	# Unpack a zip file
	cd "data/"

	# Get file list
	readarray -d '' files < <(find . -maxdepth 1 -type f -exec basename {} \;)

	# Unpack file
	if [[ "${files[*]}" =~ "zip" ]]; then
		7z x "${file}" 1>/dev/null && rm "${file}"
		file=$(find . -maxdepth 1 -type f -name "bbb_sunflower_2160p_60fps_normal.mp4" -exec basename {} \;)
	fi

	# Return filename
	if [[ "${file##*.}" == "zip" ]]; then
		printf "%s\n" "${file%.*}"
	else
		printf "%s\n" "${file}"
	fi

	cd "../"
}

cpuPreset() {
	# Select preset for CPU encode
	PS3="[+] Choose preset: "
    presets=("ultrafast" "superfast" "veryfast" "faster" "fast" "medium" "slow" "slower" "veryslow" "placebo")
    select preset in "${presets[@]}"; do
        case "${preset}" in
			"ultrafast")
				printf "%s\n" "${preset}"
                break
                ;;
            "superfast")
				printf "%s\n" "${preset}"
                break
                ;;
            "veryfast")
				printf "%s\n" "${preset}"
                break
                ;;
            "faster")
				printf "%s\n" "${preset}"
                break
                ;;
            "fast")
				printf "%s\n" "${preset}"
                break
                ;;
            "medium")
				printf "%s\n" "${preset}"
                break
                ;;
            "slow")
				printf "%s\n" "${preset}"
                break
                ;;
            "slower")
				printf "%s\n" "${preset}"
                break
                ;;
            "veryslow")
				printf "%s\n" "${preset}"
                break
                ;;
			"placebo")
				printf "%s\n" "${preset}"
                break
                ;;
		esac
	done
}

cpuEncoder() {
	# Choose encoder for cpu
	PS3="[+] Choose encoder: "
    encoders=("libx264" "libx265")
    select encoder in "${encoders[@]}"; do
        case "${encoder}" in
            "libx264")
				printf "%s\n" "${encoder}"
                break
                ;;
            "libx265")
				printf "%s\n" "${encoder}"
                break
                ;;
        esac
	done
}

setCRF() {
	# Set crf value for CPU encoding
	local enc="${1}"

	# Set max crf value based on encoder
    if [ "${enc}" == "libx264" ]; then
        crf_max=53
		crf_default=17
    elif [ "${enc}" = "libx265" ]; then
        crf_max=51
		crf_default=18
    fi

    # Set crf parameter value
    while ! [[ "${crf}" =~ [0-9] && "${crf}" -ge 0 && "${crf}" -le "${crf_max}" ]]; do
		read -r -p "[+] Choose CRF value (0-${crf_max}, defult: ${crf_default}): " crf
		if [ -z "${crf}" ]; then crf="${crf:-"${crf_default}"}"; fi
	done

	# Return crf value
	printf "%s\n" "${crf}"
}

cpuBench() {
	# Benchmark CPU

	cd "data/"

	# Get encoder
	local encoder="${1}"

	# Get preset
	local preset="${2}"

	# Get crf
	local crf="${3}"

	# Open file descriptor 3 and point it to temporary file
	tmp_file="/tmp/bench_data"
	exec 3<> "${tmp_file}"

	# Final command
	nohup 1>/dev/null ffmpeg -hide_banner \
		-stats \
		-loglevel "error" \
		-i "${file}" \
		-vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" \
		-c:a "copy" \
		-c:v "${encoder}" \
		-preset "${preset}" \
		-crf "${crf}" \
		-f null - 2>&3 &

	# Get pid of the backgrounded ffmpeg process
    pid="${!}"

    # If the script is killed, kill ffmpeg process also
    trap 'kill ${pid} 2> /dev/null' EXIT

    # While ffmpeg encoding process is running, rewrite terminal output with latest encoding data every half a second
    while kill -0 "${pid}" 2> /dev/null; do
		# Show progress
		showProgress "${tmp_file}" && printf "\r"

		# Re-check condition after .5 seconds
		sleep .5
    done

	# Last progress update
	showProgress "${tmp_file}" && printf "\n"

    # Disable the trap on a normal exit.
    trap - EXIT

	# Close FD3
	exec 3>&-

	cd "../"
}

gpuPreset() {
	# Select preset for GPU encode
	PS3="[+] Select preset: "
	presets=("p1" "p2" "p3" "p4" "p5" "p6" "p7")
	select preset in "${presets[@]}"; do
		case "${preset}" in
			"p1")
				printf "%s\n" "${preset}"
				break
				;;
			"p2")
				printf "%s\n" "${preset}"
				break
				;;
			"p3")
				printf "%s\n" "${preset}"
				break
				;;
			"p4")
				printf "%s\n" "${preset}"
				break
				;;
			"p5")
				printf "%s\n" "${preset}"
				break
				;;
			"p6")
				printf "%s\n" "${preset}"
				break
				;;
			"p7")
				printf "%s\n" "${preset}"
				break
				;;
		esac
	done
}

gpuEncoder() {
	# Set encoding for GPU benchmark
	PS3="[+] Select encoding: "
	encoders=("h264_nvenc" "hevc_nvenc")
	select encoder in "${encoders[@]}"; do
		case "${encoder}" in
			"h264_nvenc")
				printf "%s\n" "${encoder}"
				break
				;;
			"hevc_nvenc")
				printf "%s\n" "${encoder}"
				break
				;;
		esac
	done
}

gpuTune() {
	# Get tune level for gpu benchmark
	PS3="[+] Select tune: "
	tunes=("hq" "ll" "ull" "lossless")
	select tune in "${tunes[@]}"; do
		case "${tune}" in
			"hq")
				printf "%s\n" "${tune}"
				break
				;;
			"ll")
				printf "%s\n" "${tune}"
				break
				;;
			"ull")
				printf "%s\n" "${tune}"
				break
				;;
			"lossless")
				printf "%s\n" "${tune}"
				break
				;;
		esac
	done
}

gpuLevel() {
	# Set encoding level restriction
	PS3="[+] Set encoding level: "
	levels=("3.1" "4.0" "4.1" "5.0" "5.1" "5.2")
	select level in "${levels[@]}"; do
		case "${level}" in
			"3.1")
				printf "%s\n" "${level}"
				break
				;;
			"4.0")
				printf "%s\n" "${level}"
				break
				;;
			"4.1")
				printf "%s\n" "${level}"
				break
				;;
			"5.0")
				printf "%s\n" "${level}"
				break
				;;
			"5.1")
				printf "%s\n" "${level}"
				break
				;;
			"5.2")
				printf "%s\n" "${level}"
				break
				;;
		esac
	done
}

gpuBench() {
	# Benchmark GPU
	cd "data/"

	# Get encoder
	encoder="${1}"

	# Get preset
	preset="${2}"

	# Get tune
	tune="${3}"

	# Get level
	level="${4}"

	# Open file descriptor 3 and point it to temporary file
	tmp_file="/tmp/bench_file"
	exec 3<> "${tmp_file}"

	# Final command
	nohup 1>/dev/null ffmpeg -hide_banner \
		-stats \
		-loglevel "error" \
		-hwaccel "cuda" \
		-hwaccel_output_format "cuda" \
		-i "${file}" \
		-c:a "copy" \
		-c:v "${encoder}" \
		-preset "${preset}" \
		-tune "${tune}" \
		-level "${level}" \
		-2pass true \
		-f null - 2>&3 &

	# Get pid of the backgrounded ffmpeg process
    pid="${!}"

    # If the script is killed, kill ffmpeg process also
    trap 'kill ${pid} 2>/dev/null' EXIT

    # While ffmpeg encoding process is running, rewrite terminal output with latest encoding data every half a second
    while kill -0 "${pid}" 2> /dev/null; do
		# Show progress
		showProgress "${tmp_file}" && printf "\r"

		# Re-check condition after .5 seconds
		sleep .5
    done

	# Last progress update
	showProgress "${tmp_file}" && printf "\n"

    # Disable the trap on a normal exit.
    trap - EXIT

	# Close FD3
	exec 3>&-

	cd "../"
}

backupResults() {
	# Backup previous results file before a new benchmark run
	if [[ -f "${result_file}" ]]; then
		result_file_count=$(find . -type f -name "results*" | wc -l)
		mv "${result_file}" "${result_file%.*}_${result_file_count}.${result_file#*.}"
	fi
}

benchmark() {
	# Benchmark ffmpeg
	PS3="[+] Select benchmark: "
	benchmarks=("CPU" "GPU")
	select benchmark in "${benchmarks[@]}"; do
		case "${benchmark}" in
			"CPU")
				# Set benchmark
				bench="${benchmark}"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected benchmark: %s\n" "${bench}"
				printf "%s\n" "${delimiter}"

				# Set encoder
				encoder="$(cpuEncoder)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected encoder: %s\n" "${encoder}"
				printf "%s\n" "${delimiter}"

				# Set preset
				preset="$(cpuPreset)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected preset: %s\n" "${preset}"
				printf "%s\n" "${delimiter}"

				# Set CRF value
				crf="$(setCRF "${encoder}")"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected CRF: %s\n" "${crf}"
				printf "%s\n" "${delimiter}"

				# Write parameters to results file
				{
					printf "%s\n" "${delimiter}";
					printf "| [+] Encoder parameters\n";
					printf "%s\n" "${delimiter}";
					printf "| [+] Benchmark: %s\n" "${bench}";
					printf "| [+] Encoder: %s\n" "${encoder}";
					printf "| [+] Preset: %s\n" "${preset}";
					printf "| [+] CRF: %s\n" "${crf}";
					printf "%s\n" "${delimiter}";
				} >> "${result_file}"

				break
				;;
			"GPU")
				# Set benchmark
				bench="${benchmark}"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected benchmark: %s\n" "${bench}"
				printf "%s\n" "${delimiter}"

				# Get encoder
				encoder="$(gpuEncoder)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected encoder: %s\n" "${encoder}"
				printf "%s\n" "${delimiter}"

				# Get preset
				preset="$(gpuPreset)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected preset: %s\n" "${preset}"
				printf "%s\n" "${delimiter}"

				# Get tune
				tune="$(gpuTune)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected tune: %s\n" "${tune}"
				printf "%s\n" "${delimiter}"

				# Get level
				level="$(gpuLevel)"
				printf "%s\n" "${delimiter}"
				printf "| [+] Selected level: %s\n" "${level}"
				printf "%s\n" "${delimiter}"

				# Write parameters to results file
				{
					printf "%s\n" "${delimiter}";
					printf "| [+] Encoder parameters\n";
					printf "%s\n" "${delimiter}";
					printf "| [+] Benchmark: %s\n" "${bench}";
					printf "| [+] Encoder: %s\n" "${encoder}";
					printf "| [+] Preset: %s\n" "${preset}";
					printf "| [+] Tune: %s\n" "${tune}";
					printf "| [+] Level: %s\n" "${level}";
					printf "%s\n" "${delimiter}";
				} >> "${result_file}"

				break
				;;
		esac
	done

	# Benchmark start message
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Starting benchmark\n";
		printf "%s\n" "${delimiter}";
	} >> "${result_file}"

	# Main loop
	for (( i=0; i<"${iterations}"; i++ )); do
		# Print iteration
		printf "%s\n" "${delimiter}"
		printf "| [+] Iteration %s\n" "$((i+1))"
		printf "%s\n" "${delimiter}"

		# Benchmark
		if [[ "${bench}" == "CPU" ]]; then
			# Start benchmark
			cpuBench "${encoder}" "${preset}" "${crf}"
		elif [[ "${bench}" == "GPU" ]]; then
			gpuBench "${encoder}" "${preset}" "${tune}" "${level}"
		fi

		# Get encoding data of current iteration
		data=$(sed 's/\r/\n/g' /tmp/bench_data | tail -1)

		# Parse data based on encoder (frames, fps and time)
		if [[ "${encoder}" != "libx265" ]]; then
			frames="$(echo "${data}" | cut -d "=" -f 2 | tr -d " fps")"
			fps="$(echo "${data}" | cut -d "=" -f 3 | tr -d " q")"
			time="$(echo "${frames}/${fps}" | bc -l 2> /dev/null)"
			time="$(printf "%.3f" "${time}")"
		elif [[ "${encoder}" == "libx265" ]]; then
			frames="$(echo "${data}" | cut -d " " -f 2)"
			fps="$(echo "${data}" | cut -d " " -f 6 | tr -d "(")"
			time="$(echo "${data}" | cut -d " " -f 5 | tr -d "s")"
			time="$(printf "%.3f" "${time}")"
		fi

		# Get the fastest time
		if [[ "${fastest}" == 0 ]]; then
			fastest="${time}"
		elif [[ $(echo "${fastest} > ${time}" | bc -l) -eq 1 ]]; then
			fastest="${time}"
		fi

		# Total time
		total_time="$(echo "${total_time} + ${time}" | bc -l 2> /dev/null)"

		# Average time
		average_time="$(echo "${total_time} / (${i} + 1)" | bc -l 2> /dev/null)"
		average_time="$(printf "%.3f" "${average_time}")"

		# Average fps
		total_fps="$(echo "${total_fps} + ${fps}" | bc -l 2> /dev/null)"
		average_fps="$(echo "${total_fps} / (${i} + 1)" | bc -l 2> /dev/null)"
		average_fps="$(printf "%.3f" "${average_fps}")"

		# Remove temporary file
		rm "/tmp/bench_data"

		# Print time
		printf "| [+] Iteration %s time: %s, fps: %s\n" "$((i + 1))" "$(formatTime "${time}")" "${fps}"
		printf "%s\n" "${delimiter}"

		# Write iteration stats to results file
		{
			printf "| [+] Iteration %s time: %s, fps: %s\n" "$((i + 1))" "$(formatTime "${time}")" "${fps}";
			printf "%s\n" "${delimiter}";
		} >> "${result_file}"
	done

	# Print benchmark stats
	printf "%s\n" "${delimiter}"
	printf "| [+] Total time: %s\n" "$(formatTime "${total_time}")"
	printf "| [+] Average iteration time: %s\n" "$(formatTime "${average_time}")"
	printf "| [+] Average iteration fps: %s\n" "${average_fps} FPS"
	printf "| [+] Fastest time: %s\n" "$(formatTime "${fastest}")"
	printf "| [+] Fastest time (seconds): %s\n" "${fastest}"
	printf "%s\n" "${delimiter}"

	# Save benchmark stats to a file
	{
		printf "%s\n" "${delimiter}";
		printf "| [+] Total time: %s\n" "$(formatTime "${total_time}")";
		printf "| [+] Average iteration time: %s\n" "$(formatTime "${average_time}")";
		printf "| [+] Average iteration fps: %s\n" "${average_fps} FPS";
		printf "| [+] Fastest time: %s\n" "$(formatTime "${fastest}")" >> "${result_file}";
		printf "| [+] Fastest time (seconds): %s\n" "${fastest}";
		printf "%s\n" "${delimiter}";
	} >> "${result_file}"
}

#  ------
# | Main |
#  ------

# Default directory
default_directory="${HOME}/Documents/benchmark_ffmpeg"

# Results file
result_file="results.txt"

# Create default dir
defaultDir

# Backup results file
backupResults

# Array of video files to benchmark
declare -rA bench_files=(
	["320x180"]="https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4"
	["640x360"]="https://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_640x360.m4v"
	["480p"]="https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_480p_h264.mov"
	["720p"]="https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_720p_h264.mov"
	["1080p"]="https://download.blender.org/peach/bigbuckbunny_movies/big_buck_bunny_1080p_h264.mov"
	["2160p"]="https://download.blender.org/demo/movies/BBB/bbb_sunflower_2160p_60fps_normal.mp4.zip"
)

# Fastest time
fastest=0

# Total duration
total_time=0

# Total fps
total_fps=0

# Average duration
average_time=0

# Average fps
average_fps=0

# Number of iterations
iterations=5

# Print start date for a benchmark
printf "%s\n" "${delimiter}"
printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
printf "%s\n" "${delimiter}"

# Write a start date to file
{
	printf "%s\n" ${delimiter};
	printf "| [+] Benchmark started at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
	printf "%s\n" ${delimiter};
} >> "${result_file}"

# Write iterations to file
{
	printf "%s\n" "${delimiter}";
	printf "| [+] Iterations: %s\n" "${iterations}";
	printf "%s\n" "${delimiter}";
} >> "${result_file}"

# Print system info
getInfo

# Get URL for benchmark video
res="$(selectBenchmark)"
url="${bench_files[${res}]}"

# Write resolution to a file
{
	printf "%s\n" "${delimiter}";
	printf "| [+] Resolution: %s\n" "${res}";
	printf "%s\n" "${delimiter}";
} >> "${result_file}"

# Get filename
file="${url##*/}"

# Download benchmark
download

# Unpack downloaded file if it is a zip archive
file="$(unpack)"

# Start benchmark
benchmark

# Print end date for a benchmark
printf "%s\n" "${delimiter}"
printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)"
printf "%s\n" "${delimiter}"

# Write end date to a file
{
	printf "%s\n" "${delimiter}";
	printf "| [+] Benchmark ended at %s\n" "$(date +%Y-%m-%d_%H-%M-%S)";
	printf "%s\n" "${delimiter}";
	printf "\r\n";
} >> "${result_file}"
