#!/bin/sh

# Show progress for cp command on Linux
# Dependencies: bc

# Delimiter
delimiter="----------------------------------------------------------------"

#  ------------------
# | Dependency checks |
#  ------------------

# Check if bc is installed
bc -v 2>/dev/null 1>&2
if [[ ${?} != 0 ]]; then
    printf "%s\n" "${delimiter}"
    printf "| [+] Package bc is not installed. Terminating script\n"
    printf "%s\n" "${delimiter}"
    exit 1
else
    printf "%s\n" "${delimiter}"
    printf "| [+] Package bc installed\n"
    printf "%s\n" "${delimiter}"
fi

# Show error messages and exit script if required arguments are missing
if [[ ${#@} == 0 ]]; then
    printf "%s\n" "${delimiter}"
	printf "| [+] No source and destination files provided\n"
	printf "| [+] Usage: cp-stats <source file> <destination file>\n"
    printf "%s\n" "${delimiter}"
	exit 1
elif [[ ${#@} == 1 ]]; then
    printf "%s\n" "${delimiter}"
	printf "| [+] No destination file provided\n"
	printf "| [+] Usage: cp-stats <source file> <destination file>\n"
    printf "%s\n" "${delimiter}"
	exit 1
fi

function formatTime {
	# Format time to <xx>h <xx>m <xx.xxx>s
	time="${1}"
	seconds=${time%%.*}
	if [[ -z ${seconds} ]]; then seconds=0; fi
	miliseconds=${time##*.}
	if [[ -z ${miliseconds} ]]; then miliseconds=0; fi
	if [[ ${seconds} -lt 60 ]]; then
		echo "${seconds}.${miliseconds}s"
	elif [[ ${seconds} -ge 60 && ${seconds} -lt 3600 ]]; then
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${minutes}m ${seconds}.${miliseconds}s"
	elif [[ ${seconds} -ge 3600 ]]; then
		hours=$(echo "${seconds}/3600" | bc -l | cut -d "." -f 1)
		if [[ -z ${hours} ]]; then hours=0; fi
		seconds=$((${seconds}-3600*${hours}))
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${hours}h ${minutes}m ${seconds}.${miliseconds}s"
	fi
}

function showProgress {
	# Show progress of cp command

	# Get interval between current time and timer
	interval=$(echo "$(date +%s.%2N)-${timer}" | bc -l)

	# Get destination file size
	dst_size=$(du -b ${target}${src_file##*/} | tail -1 | xargs echo | cut -d " " -f 1)

	# Pretty print destination size
	dst_size_pretty=$(prettyPrint "${dst_size}")

	# Count progress %
	progress=$(echo "${dst_size}/${src_size}*100" | bc -l 2>/dev/null)

	# Duration of copy process
	duration=$(echo "$(date +%s.%2N) - ${start}" | bc -l 2>/dev/null)

	# Pretty print duration
	duration_pretty=$(formatTime "${duration}")

	# Get estimated time
	estimated=$(echo "scale=2; (${src_size} - ${dst_size}) * ${duration} / ${dst_size}" | bc -l 2>/dev/null)

	# Format estimated time
	estimated=$(formatTime ${estimated})

	# Average speed of copy process
	avg_speed=$(echo "${dst_size}/${duration}" | bc -l 2>/dev/null)

	# Pretty print average speed
	avg_speed=$(prettyPrint ${avg_speed})

	# Every second - 1) Reset timer; 2) Reset interval; 3) Update current speed
	if [[ $(echo "${interval} >= 1" | bc -l) -eq 1 ]]; then
		# Reset timer
		timer=$(date +%s.%2N)

		# Reset interval
		interval=0

		# Update current speed
		# Set variable for old size
		if [[ -z ${old_size} ]]; then
			old_size=0
		fi

		# Calculate current speed
		current_speed=$(echo "(${dst_size}-${old_size})" | bc -l 2>/dev/null)

		# Set old size as current speed
		old_size="${dst_size}"

		# Pretty print current speed
		current_speed=$(prettyPrint "${current_speed}")
	fi

	# If current speed is empty, then current speed = average speed
	if [[ -z ${current_speed} ]]; then
		current_speed=${avg_speed}
	fi

	# Print progress (<copied size/total size> <completion percentage>%)
	printf "| [+] Progress: ${dst_size_pretty}/${src_size_pretty} Completed: %.2f%% Duration: ${duration_pretty} Average speed: ${avg_speed}/s Current speed: ${current_speed}/s Estimated time: ${estimated}     " ${progress}

	# Unset variables
	unset current_speed
}

function prettyPrint {
	# Pretty print file sizes when showing progress
	local size="${1}"
	# If size < 1024 == true
	if [[ $(echo "${size} < 1024" | bc -l) -eq 1 ]]; then
		printf "%0.2fB" ${size};
	elif [[ $(echo "${size} >= 1024" | bc -l) -eq 1 ]] && [[ $(echo "${size} < 1024*1024" | bc -l) -eq 1 ]]; then
		printf "%0.2fKB" "$(echo "${size}/1024" | bc -l 2>/dev/null)"
	elif [[ $(echo "${size} >= 1024*1024" | bc -l) -eq 1 ]] && [[ $(echo "${size} < 1024*1024*1024" | bc -l) -eq 1 ]]; then
		printf "%0.2fMB" "$(echo "${size}/1024/1024" | bc -l 2>/dev/null)"
	elif [[ $(echo "${size} >= 1024*1024*1024" | bc -l) -eq 1 ]] && [[ $(echo "${size} < 1024*1024*1024*1024" | bc -l) -eq 1 ]]; then
		printf "%0.2fGB" "$(echo "${size}/1024/1024/1024" | bc -l 2>/dev/null)"
	fi
}

#  ----------------------
# | Initialize variables |
#  ----------------------

# Initial total size
total=0

# Count files
count=0

# Count errors for getopts
c=0

# Initialize variable for total size
total_size=0

# Initialize variable for total duration
total_duration=0

# Set up getopts
# c - command (required)
# p - parameters (optional)
# f - files to copy (required)
# t - target directory (required)

# Printing messages
printf "%s\n" ${delimiter}
printf "| [+] Selected parameters\n"
printf "%s\n" ${delimiter}

# Opstring
OPTSTRING=":c:p:f:t:"

while getopts ${OPTSTRING} opt; do
	case ${opt} in
		c)
			cmd=${OPTARG}
			printf "| [+] Command ${cmd} was selected\n"
			;;
		p)
			parameters+=(${OPTARG})
			printf "| [+] Parameters ${parameters} were selected\n"
			;;
		f)
			files+=(${OPTARG})
			printf "| [+] File ${files[$((${#files[@]} - 1))]} was selected\n"
			;;
		t)
			target=${OPTARG}
			printf "| [+] Target directory ${target} was selected\n"
			;;
		:)
			printf "| [!] Option -${OPTARG} requires an argument\n"
			exit 1
			;;
		?)
			printf "| [!] Invalid option: -${OPTARG}\n"
			exit 1
			;;
	esac
done

# Print delimiter
printf "%s\n" ${delimiter}

# Available commands
commands=("cp", "mv", "rm")

# Errors
printf "%s\n" ${delimiter}
printf "| [+] Errors\n"
printf "%s\n" ${delimiter}

# Check if mandatory options were selected
if [[ -z ${cmd} ]]; then
	printf "| [!] No command was selected\n"
	c=1
fi

if ! [[ ${commands[@]} =~ ${cmd} ]]; then
	printf "| [!] Command ${cmd} not supported (Choose one from: cp, mv or rm)\n"
	c=1
fi

if [[ -z ${files[@]} ]]; then
	printf "| [!] No files specified\n"
	c=1
fi

if [[ -z ${target} ]]; then
	printf "| [!] No target specified\n"
	c=1
fi

# Print delimiter
printf "%s\n" ${delimiter}

if [[ ${c} == 1 ]]; then
	printf "%s\n" ${delimiter}
	printf "| [!] One or more errors found. Quitting...\n"
	printf "%s\n" ${delimiter}
	exit 1
else
	printf "%s\n" ${delimiter}
	printf "| [+] No errors found\n"
	printf "%s\n" ${delimiter}
fi

# If target directory does not exist - create it
if ! [[ -d ${target} ]]; then
	mkdir -p ${target}
    printf "%s\n" "${delimiter}"
	printf "| [+] Directory ${target} created\n"
    printf "%s\n" "${delimiter}"
fi

# Append forward slash to a target directory name, if doesn't exist
if [[ -d ${target} ]]; then
	if [[ ${target:$((${#target}-1)):1} != "/" ]]; then
		target+="/"
	fi
fi

# Add cmd
full_command+="${cmd} "

for x in ${parameters[@]}; do
	full_command+="-${x} "
done

for src_file in ${files[@]}; do
	# Add file to count
	((++count))

	# Get original command without files
	full_command_org=${full_command}

	# Append file to command
	full_command+="${src_file} "

	# Remove last char from file
	if [[ ${src_file:$((${#src_file}-1)):1} == "/" ]]; then
		src_file=$(echo ${src_file} | sed 's/.$//')
	fi

	# Append target to command
	full_command+="${target}"

	# Append target file
	full_command+="${src_file##*/}"

	# Print info
	printf "%s\n" ${delimiter}
	printf "| [+] Full command: ${full_command}\n"
	printf "%s\n" ${delimiter}

	# Get source file size
	src_size=$(du -b "${src_file}" | tail -1 | xargs echo | cut -d " " -f 1)
	src_size_pretty=$(prettyPrint "${src_size}")

	# Start time of copy command
	start=$(date +%s.%2N)

	# Timer for getting current speed (bytes per second)
	timer="${start}"

	# Start cp process and background it
	${full_command} &

	# Get PID of backgrounded process
	pid="${!}"

	# If the script is killed, kill cp process also
	trap "kill ${pid} 2> /dev/null" EXIT

	# Print info about copied files
    printf "%s\n" "${delimiter}"
	printf "| [+] Copying ${src_file} to ${target}${src_file##*/}\n"

	# Show progress while cp is running in the background
	while kill -0 ${pid} 2> /dev/null; do
		showProgress && printf "\r"
	done

	# Show completed progress
	showProgress && printf "\n"

	# Get total size
	total_size=$((${total_size} + ${dst_size}))
	total_size_pretty=$(prettyPrint "${total_size}")

	# Get total time
	total_duration=$(echo "${total_duration} + ${duration}" | bc -l)
	total_duration_pretty=$(formatTime "${total_duration}")

	# Print stats
	printf "| [+] Copy of ${src_file} done, total size: ${total_size_pretty}, total time: ${total_duration_pretty}\n"
    printf "%s\n" "${delimiter}"

	# Disable the trap on a normal exit
	trap - EXIT

	# Restore original command
	full_command=${full_command_org}
done

# Print exit message
printf "%s\n" "${delimiter}"
printf "| [+] ${cmd} done. ${count} files, total size: ${total_size_pretty}, total time: ${total_duration_pretty}\n"
printf "%s\n" "${delimiter}"
