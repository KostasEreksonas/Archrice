#!/bin/sh

# Scan current working directory recursively for 'names' file and extract audio stream from a given video file
# Line format in names file - <video_file_name>,<audio_file.mp3>

function showProgress {
	# Show progress for extracting audio stream
	line=$(sed 's/\r/\n/g' /tmp/audio_data | tail -1)
	text=$(echo "${line}" | awk '{print "| [+] " $0}')
	printf "${text}"
}

# Root dir
root_dir="$(pwd)"

delimiter="----------------------------------------------------------------"

# Search for directories
find . -type d -print0 | while read -d $'\0' dir; do
	# Get full path for a dir
	dir=$(echo "${dir}" | sed "s:\.:${root_dir}:g")

	# Change to directory
	cd "${dir}"

	# Search for "urls" file
	for dir_file in *; do
		if [[ "${dir_file}" == "names" ]]; then
			declare -A files

			# Print info
			printf "%s\n" "${delimiter}"
			printf "| [+] Names file detected: ${dir} => ${dir_file}\n"
			printf "%s\n" "${delimiter}"

			IFS_BAK="${IFS}"
			IFS=$'\n'

			for line in $(cat names); do
				key=$(echo "${line}" | cut -d "," -f 1)
				value=$(echo "${line}" | cut -d "," -f 2)
				files+=(["${key}"]="${value}")
			done

			IFS="${IFS_BAK}"

			for key in "${!files[@]}"; do
				printf "%s\n" "${delimiter}"
				printf "| [+] ${key} => ${files[${key}]}\n"

				# Create a new file descriptor and point it to temporary metadata file
				exec 3<> /tmp/audio_data

				# Start ffmpeg encoding process and move it to background, save encoding data to temporary file
				nohup 1>/dev/null </dev/null ffmpeg -hide_banner -stats -loglevel error -i "${key}" -acodec libmp3lame ${files[${key}]} 2>&3 &

				# Get pid of the backgrounded ffmpeg process
				pid="${!}"

				# If the script is killed, kill ffmpeg process also
				trap "kill ${pid} 2>/dev/null" EXIT

				# While ffmpeg encoding process is running, rewrite terminal output with latest encoding data every half a second
				while kill -0 "${pid}" 2>/dev/null; do
					showProgress && printf "\r"
				done

				# Last progress message
				showProgress && printf "\n"

				# Print info
				printf "| [+] Deleting ${key}\n"
				rm "${key}"
				printf "%s\n" "${delimiter}"

				# Disable the trap on a normal exit.
				trap - EXIT

				# Delete file descriptor 3
				exec 3>&-

				# Remove temporary file for encoding data
				rm /tmp/audio_data
			done
		fi
	done
done
