#!/bin/sh

# Convert all video files in a given directory
# Dependencies: ffmpeg, bc

#  -----------
# | Delimiter |
#  -----------

delimiter="----------------------------------------------------------------"

#  -----------
# | Functions |
#  -----------

function getInfo {
	# Get system info
	os=$(grep -w ID /etc/os-release | cut -d "=" -f 2)
	cpu=$(grep "model name" /proc/cpuinfo | head -1 | cut -d " " -f 5)
	cores=$(grep "cpu cores" /proc/cpuinfo | head -1 | cut -d ":" -f 2 | tr -d " ")
	threads=$(grep processor /proc/cpuinfo | wc -l)
	memory=$(echo "$(grep MemTotal /proc/meminfo | cut -d " " -f 8)/1024/1024" | bc -l)
	min_freq=$(echo "$(lscpu | grep "CPU min" | cut -d ":" -f 2 | cut -d "." -f 1 | tr -d " ")/1000" | bc -l)
	max_freq=$(echo "$(lscpu | grep "CPU max" | cut -d ":" -f 2 | cut -d "." -f 1 | tr -d " ")/1000" | bc -l)
	uptime=$(formatTime $(cat /proc/uptime | cut -d " " -f 1))
	gpus=$(lspci | grep VGA | cut -d ":" -f 3 | awk '{$1=$1;print}')
	IFS=$'\n' read -d '' -r -a gpus <<<"$gpus" # Read found GPU's into an array
	# Print system info
	printf "%s\n" "${delimiter}"
	printf "| [+] System info:\n"
	printf "%s\n" "${delimiter}"
	printf "| [+] OS: ${os}\n"
	printf "| [+] CPU: ${cpu}\n"
	printf "| [+] Cores: ${cores}\n"
	printf "| [+] Threads: ${threads}\n"
	printf "| [+] Min frequency: %0.2f GHz\n" ${min_freq}
	printf "| [+] Max frequency: %0.2f GHz\n" ${max_freq}
	printf "| [+] Memory: %.2f GB\n" ${memory}
	printf "| [+] Uptime: ${uptime}\n"
	for (( i=0; i<${#gpus[@]}; i++ )); do
		printf "| [+] GPU: ${gpus[${i}]}\n"
	done
	printf "%s\n" "${delimiter}"
}

function defaultDirectory {
	# Set default directory to put video files
	defaultDir="${HOME}/Documents/encodes"
	while true; do
		printf "%s\n" "${delimiter}"
		read -p "Do you want to use default directory for encoding files? [Y/N] " choice
		printf "%s\n" "${delimiter}"
		if [[ ${choice} == "Y" ]] || [[ ${choice} == "y" ]]; then
			# Create default directory, if it doesn't exist
			if ! [[ -d ${defaultDir} ]]; then
				mkdir -p ${defaultDir}
				printf "%s\n" "${delimiter}"
				printf "| [+] Directory ${defaultDir} created\n"
				printf "%s\n" "${delimiter}"
			else
				printf "%s\n" "${delimiter}"
				printf "| [+] Directory ${defaultDir} exists\n"
				printf "%s\n" "${delimiter}"
			fi

			# Change into default directory
			cd ${defaultDir}
			printf "%s\n" "${delimiter}"
			printf "| [+] Changed into ${defaultDir}\n"
			printf "%s\n" "${delimiter}"
			break
		elif [[ ${choice} == "N" ]] || [[ ${choice} == "n" ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] Default directory not used\n"
			printf "%s\n" "${delimiter}"
			break
		fi
	done
}

function setParameters {
	# Set parameters for ffmpeg
	enc=${1}
	audio_default=${2}
	crf_default=${3}

	# Set audio parameter value
	printf "%s\n" "${delimiter}"
	read -p "| [+] Choose audio settings (default: ${audio_default}): " audio
	printf "%s\n" "${delimiter}"
	if [ -z ${audio} ]; then audio="${audio:-${audio_default}}"; fi
	printf "%s\n" "${delimiter}"
	printf "| [+] Audio: ${audio}\n"
	printf "%s\n" "${delimiter}"

	# Set preset parameter value
	PS3="[+] Choose preset: "
	values=("ultrafast" "superfast" "veryfast" "faster" "fast" "medium" "slow" "slower" "veryslow" "placebo")
	select value in ${values[@]}; do
		case ${value} in
			"ultrafast")
				preset=${value}
				break
				;;
			"superfast")
				preset=${value}
				break
				;;
			"veryfast")
				preset=${value}
				break
				;;
			"faster")
				preset=${value}
				break
				;;
			"fast")
				preset=${value}
				break
				;;
			"medium")
				preset=${value}
				break
				;;
			"slow")
				preset=${value}
				break
				;;
			"slower")
				preset=${value}
				break
				;;
			"veryslow")
				preset=${value}
				break
				;;
			"placebo")
				preset=${value}
				break
				;;
			*)
				printf "%s\n" "${delimiter}"
				printf "| [+] No such option ${REPLY}\n"
				printf "%s\n" "${delimiter}"
				;;
		esac
	done

	# Print preset
	printf "%s\n" "${delimiter}"
	printf "| [+] Preset: ${preset}\n"
	printf "%s\n" "${delimiter}"

	# Set max crf value based on encoder
	if [ ${enc} == "libx264" ]; then
		crf_max=53
	elif [ ${enc} = "libx265" ]; then
		crf_max=51
	fi

	# Set crf parameter value
	while ! [[ ${crf} =~ [0-9] && ${crf} -ge 0 && ${crf} -le ${crf_max} ]]; do
		printf "%s\n" "${delimiter}"
        read -p "| [+] Choose CRF value (0-${crf_max}, defult: ${crf_default}): " crf
		printf "%s\n" "${delimiter}"
        if [ -z ${crf} ]; then crf="${crf:-${crf_default}}"; fi
        if [[ ${crf} -lt 0 || ${crf} -gt ${crf_max} ]]; then
				printf "%s\n" "${delimiter}"
                printf "| [+] Please enter a CRF value between 0 - ${crf_max}\n"
				printf "%s\n" "${delimiter}"
        fi
	done

	# Print CRF
	printf "%s\n" "${delimiter}"
	printf "| [+] CRF: ${crf}\n"
	printf "%s\n" "${delimiter}"
}

function formatTime {
	# Format time to <xx>h <xx>m <xx.xxx>s
	time=${1}
	seconds=${time%%.*}
	if [[ -z ${seconds} ]]; then seconds=0; fi
	miliseconds=${time##*.}
	if [[ -z ${miliseconds} ]]; then miliseconds=0; fi
	if [[ ${seconds} -lt 60 ]]; then
		echo "${seconds}.${miliseconds} seconds"
	elif [[ ${seconds} -ge 60 && ${seconds} -lt 3600 ]]; then
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${minutes} minutes ${seconds}.${miliseconds} seconds"
	elif [[ ${seconds} -ge 3600 ]]; then
		hours=$(echo "${seconds}/3600" | bc -l | cut -d "." -f 1)
		if [[ -z ${hours} ]]; then hours=0; fi
		seconds=$((${seconds}-3600*${hours}))
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${hours} hours ${minutes} minutes ${seconds}.${miliseconds} seconds"
	fi
}

function getEncoding {
	# Get encoding data of a video file
	local f=${1} # Create a local variable for filename

	# Create a new file descriptor and point it to temporary metadata file
	exec 3<> /tmp/metadata

	# Get metadata from ffmpeg and point it to FD 3
	ffmpeg -i ${f} 2>&3 1>&2

	# Get encoder data
	video=$(grep "Video:" /tmp/metadata | cut -d ":" -f 4 | cut -d " " -f 2)
	encoder=$(grep "ENCODER" /tmp/metadata | awk 'NR==2{print}' | cut -d " " -f 20)

	# Return encoder data
	if [[ -z ${encoder} ]]; then
		echo "${video}"
	else
		echo "${video}-${encoder}"
	fi

	# Remove FD 3
	exec 3>&-

	# Remove temporary file
	rm /tmp/metadata
}

function checkConversion {
	# Check if a file has been converted
	local f=${1} # A file to convert
	local name=${2} # Original filename
	local ext_orig=${3} # Original extension
	c=0 # Conversion flag. Set to 1 if a file is already converted

	# Check if the file is a video file of a supported format
	if [[ ${c} == 0 ]]; then
		if ! [[ ${extensions[@]} =~ ${ext_orig} ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] \"${f}\" is not a video file / unsupported extension \"${ext_orig}\"\n"
			printf "%s\n" "${delimiter}"
			c=1
		fi
	fi

	# Check if current file has "_conv" suffix
	if [[ ${c} == 0 ]]; then
		if [[ ${name} =~ (_conv)$ ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] File ${f} is already converted\n"
			printf "%s\n" "${delimiter}"
			c=1
		fi
	fi

	# If a directory contains files with _conv suffix, check if filename matches current file
	if [[ ${c} == 0 ]]; then
		for conv in *_conv*; do
			if ! [[ ${conv} == "*_conv*" ]]; then
				if [[ ${name} == ${conv%%_conv*} ]]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} is already converted and saved as ${conv}\n"
					printf "%s\n" "${delimiter}"
					c=1
					break
				fi
			fi
		done
	fi

	# If previous checks passed, check for a different file with same name and same encoder as specified
	if [[ ${c} == 0 ]]; then
		for file in *.${ext}; do
			if ! [[ ${file} == "*.${ext}" ]]; then
				file_encoding=$(getEncoding ${file})
				if [[ ${file%%.*} == ${f%%.*} ]] && [[ ${file_encoding} =~ ${enc} ]]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} (enc: ${file_encoding}) is already encoded with ${enc} and saved as ${file}\n"
					printf "%s\n" "${delimiter}"
					c=1
					break
				fi
			fi
		done
	fi
}

function removeSuffix {
	# Remove "_conv" suffix from filename
	while true; do
		printf "%s\n" "${delimiter}"
		read -p "| [+] Do you want to remove \"_conv\" suffix from the converted files? [Y/N] " choice
		printf "%s\n" "${delimiter}"
		if [[ "${choice}" == "Y" || "${choice}" == "y" ]]; then
			for f in *_conv*; do
				if [ ${f} == "*_conv*" ]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] No files to rename\n"
					printf "%s\n" "${delimiter}"
				else
					ext=${f##*.}
					mv "${f}" "${f/_conv.${ext}/.${ext}}"
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} renamed to ${f%%_conv*}.${f##*.}\n"
					printf "%s\n" "${delimiter}"
				fi
			done
			break
		elif [[ "${choice}" == "N" || "${choice}" == "n" ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] Quitting...\n"
			printf "%s\n" "${delimiter}"
			break
		fi
	done
}

function deleteOriginal {
	# Delete original video files
	while true; do
		count_original=0
		printf "%s\n" "${delimiter}"
		read -p "| [+] Do you want to delete original files? [Y/N] " choice
		printf "%s\n" "${delimiter}"
		if [[ "${choice}" == "Y" || "${choice}" == "y" ]]; then
			for key in ${!conv_array[@]}; do
				if [[ ${conv_array[$key]} == 0 ]]; then
					rm ${key}
					printf "%s\n" "${delimiter}"
					printf "[+] File ${key} deleted\n"
					printf "%s\n" "${delimiter}"
					count_original=$((++count_original))
				fi
			done
			if [[ ${count_original} == 0 ]]; then
				printf "%s\n" "${delimiter}"
				printf "| [+] No video files to delete\n"
				printf "%s\n" "${delimiter}"
			fi
			break
		elif [[ "${choice}" == "N" || "${choice}" == "n" ]]; then
			printf "%s\n" "${delimiter}"
			printf "[+] Keeping the original files\n"
			printf "%s\n" "${delimiter}"
			break
		fi
	done
}

function setEncoder {
	# Choose an encoder
	if [ -z ${enc} ]; then
		PS3="[+] Choose encoder: "
		encoders=("libx264" "libx265")
		select encoder in ${encoders[@]}; do
			case ${encoder} in
				"libx264")
					enc=${encoder}
					break
					;;
				"libx265")
					enc=${encoder}
					break
					;;
				*)
					printf "%s\n" "${delimiter}"
					echo "| [+] No such option ${REPLY}"
					printf "%s\n" "${delimiter}"
					;;
			esac
		done
	fi

	# Print encoder
	printf "%s\n" "${delimiter}"
	printf "| [+] Encoder: ${enc}\n"
	printf "%s\n" "${delimiter}"
}

function chooseExtension {
	# Choose file extension to format
	if [ -z ${ext} ]; then
		# Choose a file extension to convert to
		PS3="[+] Choose file extension to convert to: "
		extensions=("mkv" "mp4" "webm" "avi" "mov" "m4v" "wmv")
		select extension in ${extensions[@]}; do
			case ${extension} in
				"mp4")
					ext=${extension}
					break
					;;
				"mkv")
					ext=${extension}
					break
					;;
				"webm")
					ext=${extension}
					break
					;;
				"avi")
					ext=${extension}
					break
					;;
				*)
					printf "%s\n" "${delimiter}"
					printf "| [+] No such option ${REPLY}\n"
					printf "%s\n" "${delimiter}"
					;;
			esac
		done
	fi

	# Print extension
	printf "%s\n" "${delimiter}"
	printf "| [+] Extension to convert: ${ext}\n"
	printf "%s\n" "${delimiter}"
}

function updateName {
	# Remove special characters from filenames and replace whitespaces with underscores
	$(update-filename)
	printf "%s\n" "${delimiter}"
	printf "| [+] Filenames updated\n"
	printf "%s\n" "${delimiter}"
}

function countEncoded {
	# Print count of encoded files
	printf "%s\n" "${delimiter}"
	printf "| [+] Encoded ${count} files\n"
	printf "%s\n" "${delimiter}"
}

function printTotal {
	# Print total time
	if [[ ${count} -gt 0 ]]; then
		if [[ -z ${total} ]]; then total=0; fi
		total=$(formatTime ${total})
		printf "%s\n" "${delimiter}"
		printf "| [+] All videos encoded in ${total}\n"
		printf "%s\n" "${delimiter}"
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Time error: no videos encoded\n"
		printf "%s\n" "${delimiter}"
	fi
}

function encodeStatus {
	# Pretty print encoding status
	# Declare local variables
	local f="${1}"
	local audio="${2}"
	local enc="${3}"
	local preset="${4}"
	local crf="${5}"
	local name="${6}"
	local ext="${7}"
	local loglevel="${8}"

	# Create a file descriptor 3 and point it to temporary file with encoding data
	exec 3<> /tmp/encoding_data

	# Start ffmpeg encoding process and move it to background, save encoding data to temporary file
	nohup 1>/dev/null ffmpeg -stats -loglevel ${loglevel} -i ${f} -c:a ${audio} -c:v ${enc} -x265-params log-level=none -preset ${preset} -crf ${crf} ${name}"_conv".${ext} 2>&3 &

	# Get pid of the backgrounded process
	pid=${!}

	# If the script is killed, kill ffmpeg also
	trap "kill ${pid} 2> /dev/null" EXIT

	# While ffmpeg encoding process is running, rewrite terminal output with latest encoding data every half a second
	while kill -0 ${pid} 2> /dev/null; do
		line=$(sed 's/\r/\n/g' /tmp/encoding_data | tail -1)
		text=$(echo ${line} | awk '{print "| [+] " $0}')
		printf "${text}\r"
		sleep .5
	done

	# Disable the trap on a normal exit.
	trap - EXIT

	# Delete file descriptor 3
	exec 3>&-

	# Remove temporary file for encoding data
	rm /tmp/encoding_data
}

function encodeFiles {
	# Encode all video files
	for f in *; do
		# Get files in current directory
		if [[ -f ${f} ]] && [[ ${f} =~ [A-Za-z0-9_\(\)]\.[A-Za-z0-9]+{3,4} ]]; then
			# Split filename
			name=${f%%.*} # Get file name
			ext_orig=${f##*.} # Original file extension
			ext_orig=$(echo ${ext_orig} | tr '[:upper:]' '[:lower:]') # Convert extension to lowercase
			checkConversion "${f}" "${name}" "${ext_orig}" # Check if file is already converted
			conv_array["${f}"]+="${c}" # Append to conv_array

			# If all checks are passed, convert the video file
			if [[ ${c} == 0 ]]; then
				# Get encoding of a current file
				f_enc=$(getEncoding ${f})
				# Get duration of a current file
				duration=$(exec 3<> /tmp/metadata; ffprobe -show_entries stream_tags:format_tags -of json ${f} 1>&3 2>&1; grep Duration /tmp/metadata | cut -d ":" -f 2,3,4 | cut -d "," -f 1 | tr -d " "; exec 3>&-; rm /tmp/metadata)
				if [ -z ${f_enc} ]; then f_enc="None"; fi # Set file encoding as None if no encoding data is found
				printf "%s\n" "${delimiter}"
				printf "| [+] Encoding ${f} (enc: ${f_enc}) to ${name}_conv.${ext} (enc: ${enc})\n"
				printf "| [+] Duration: ${duration}\n"
				loglevel="quiet"
				start=$(date +%s.%3N) # Start time
				#ffmpeg -stats -loglevel ${loglevel} -i ${f} -c:a ${audio} -c:v ${enc} -x265-params log-level=none -preset ${preset} -crf ${crf} ${name}"_conv".${ext}
				encodeStatus "${f}" "${audio}" "${enc}" "${preset}" "${crf}" "${name}" "${ext}" "${loglevel}"
				end=$(date +%s.%3N) # End time
				time=$(formatTime $(echo "${end}-${start}" | bc -l)) # Encoding time
				printf "\n| [+] File ${f} (enc: ${f_enc}) encoded to ${name}_conv.${ext} (enc: ${enc}) in ${time}\n"
				printf "%s\n" "${delimiter}"
				total=$(echo "${total} + ${end} - ${start}" | bc -l)
				count=$((++count))
			fi
		fi
	done
}

function printStatus {
	# Print video file names and their conversion status (0 - encoded, 1 - not encoded)
	printf "%s\n" "${delimiter}"
	printf "| [+] File names and their conversion status (0 - encoded, 1 - not encoded):\n"
	for key in ${!conv_array[@]}; do
		printf "| [+] ${key} => ${conv_array[${key}]}\n"
	done
	printf "%s\n" "${delimiter}"
}

function checkDeps {
	# Check dependencies
	# Check if ffmpeg is installed
	ffmpeg -version 2>/dev/null 1>&2
	if [[ ${?} != 0 ]]; then
		printf "%s\n" "${delimiter}"
		printf "| [+] Package ffmpeg is not installed. Terminating script\n"
		printf "%s\n" "${delimiter}"
		exit 1
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Package ffmpeg installed\n"
		printf "%s\n" "${delimiter}"
	fi

	# Check if bc is installed
	bc -v 2>/dev/null 1>&2
	if [[ ${?} != 0 ]]; then
		printf "%s\n" "${delimiter}"
		printf "| [+] Package bc is not installed. Terminating script\n"
		printf "%s\n" "${delimiter}"
		exit 1
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Package bc installed\n"
		printf "%s\n" "${delimiter}"
	fi
}

#  ------
# | Main |
#  ------

#  Declare an associative array for storing file names and their conversion status (${status} => ${file})
declare -A conv_array

# Total encoding duration
total=0

# Count encoded files
count=0

# Check dependencies
checkDeps

# Print system info
getInfo

# Set default directory
defaultDirectory

# Choose an encoder
setEncoder

# Set default parameters for an encoder
if [ ${enc} == "libx264" ]; then
	# Set default parameters for libx264
	setParameters ${enc} "copy" "17"
elif [ ${enc} == "libx265" ]; then
	# Set default parameters for libx265
	setParameters ${enc} "copy" "18"
fi

# Choose an extension
chooseExtension

# Update filename
updateName

# Encode all video files
encodeFiles

# Print video file names and their conversion status (0 - encoded, 1 - not encoded)
printStatus

# Print count of encoded files
countEncoded

# Print total time
printTotal

# Remove original video files
deleteOriginal

# Remove "_conv" suffix from filenames (optional)
removeSuffix
