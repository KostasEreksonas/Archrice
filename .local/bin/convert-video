#!/bin/sh

# Convert all video files in a given directory
# Dependencies: ffmpeg, exiftool, bc

#  -----------
# | Delimiter |
#  -----------

delimiter="----------------------------------------------------------------"

#  -----------
# | Functions |
#  -----------

function setParameters {
	# Set parameters for ffmpeg
	enc=${1}
	audio_default=${2}
	crf_default=${3}

	# Set audio parameter value
	printf "%s\n" "${delimiter}"
	read -p "| [+] Choose audio settings (default: ${audio_default}): " audio
	printf "%s\n" "${delimiter}"
	if [ -z ${audio} ]; then audio="${audio:-${audio_default}}"; fi
	printf "%s\n" "${delimiter}"
	printf "| [+] Audio: ${audio}\n"
	printf "%s\n" "${delimiter}"

	# Set preset parameter value
	PS3="[+] Choose preset: "
	values=("ultrafast" "superfast" "veryfast" "faster" "fast" "medium" "slow" "slower" "veryslow" "placebo")
	select value in ${values[@]}; do
		case ${value} in
			"ultrafast")
				preset=${value}
				break
				;;
			"superfast")
				preset=${value}
				break
				;;
			"veryfast")
				preset=${value}
				break
				;;
			"faster")
				preset=${value}
				break
				;;
			"fast")
				preset=${value}
				break
				;;
			"medium")
				preset=${value}
				break
				;;
			"slow")
				preset=${value}
				break
				;;
			"slower")
				preset=${value}
				break
				;;
			"veryslow")
				preset=${value}
				break
				;;
			"placebo")
				preset=${value}
				break
				;;
			*)
				printf "%s\n" "${delimiter}"
				printf "| [+] No such option ${REPLY}\n"
				printf "%s\n" "${delimiter}"
				;;
		esac
	done

	# Print preset
	printf "%s\n" "${delimiter}"
	printf "| [+] Preset: ${preset}\n"
	printf "%s\n" "${delimiter}"

	# Set max crf value based on encoder
	if [ ${enc} == "libx264" ]; then
		crf_max=53
	elif [ ${enc} = "libx265" ]; then
		crf_max=51
	fi

	# Set crf parameter value
	while ! [[ ${crf} =~ [0-9] && ${crf} -ge 0 && ${crf} -le ${crf_max} ]]; do
		printf "%s\n" "${delimiter}"
        read -p "| [+] Choose CRF value (0-${crf_max}, defult: ${crf_default}): " crf
		printf "%s\n" "${delimiter}"
        if [ -z ${crf} ]; then crf="${crf:-${crf_default}}"; fi
        if [[ ${crf} -lt 0 || ${crf} -gt ${crf_max} ]]; then
				printf "%s\n" "${delimiter}"
                printf "| [+] Please enter a CRF value between 0 - ${crf_max}\n"
				printf "%s\n" "${delimiter}"
        fi
	done

	# Print CRF
	printf "%s\n" "${delimiter}"
	printf "| [+] CRF: ${crf}\n"
	printf "%s\n" "${delimiter}"
}

function formatTime {
	# Format time to <xx>h <xx>m <xx.xxx>s
	time=${1}
	seconds=${time%%.*}
	if [[ -z ${seconds} ]]; then seconds=0; fi
	miliseconds=${time##*.}
	if [[ -z ${miliseconds} ]]; then miliseconds=0; fi
	if [[ ${seconds} -lt 60 ]]; then
		echo "${seconds}.${miliseconds} seconds"
	elif [[ ${seconds} -ge 60 && ${seconds} -lt 3600 ]]; then
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${minutes} minutes ${seconds}.${miliseconds} seconds"
	elif [[ ${seconds} -ge 3600 ]]; then
		hours=$(echo "${seconds}/3600" | bc -l | cut -d "." -f 1)
		if [[ -z ${hours} ]]; then hours=0; fi
		seconds=$((${seconds}-3600*${hours}))
		minutes=$(echo "${seconds}/60" | bc -l | cut -d "." -f 1)
		if [[ -z ${minutes} ]]; then minutes=0; fi
		seconds=$((${seconds}-60*${minutes}))
		if [[ -z ${seconds} ]]; then seconds=0; fi
		echo "${hours} hours ${minutes} minutes ${seconds}.${miliseconds} seconds"
	fi
}

function checkConversion {
	# Check if a file has been converted
	local f=${1} # A file to convert
	local name=${2} # Original filename
	local ext_orig=${3} # Original extension
	c=0 # Conversion flag. Set to 1 if a file is already converted

	# Check if the file is a video file of a supported format
	if [[ ${c} == 0 ]]; then
		if ! [[ ${extensions[@]} =~ ${ext_orig} ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] \"${f}\" is not a video file / unsupported extension \"${ext_orig}\"\n"
			printf "%s\n" "${delimiter}"
			c=1
		fi
	fi

	# Check if current file has "_conv" suffix
	if [[ ${c} == 0 ]]; then
		if [[ ${name} =~ (_conv)$ ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] File ${f} is already converted\n"
			printf "%s\n" "${delimiter}"
			c=1
		fi
	fi

	# If a directory contains files with _conv suffix, check if filename matches current file
	if [[ ${c} == 0 ]]; then
		for conv in *_conv*; do
			if ! [[ ${conv} == "*_conv*" ]]; then
				if [[ ${name} == ${conv%%_conv*} ]]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} is already converted and saved as ${conv}\n"
					printf "%s\n" "${delimiter}"
					c=1
					break
				fi
			fi
		done
	fi

	# If previous checks passed, check for a different file with same name and same encoder as specified
	if [[ ${c} == 0 ]]; then
		for file in *.${ext}; do
			if ! [[ ${file} == "*.${ext}" ]]; then
				file_encoding=$(exiftool ${file} | grep -E 'Encoding|Encoder' | cut -d ":" -f 2 | cut -d " " -f 3)
				if [[ ${file%%.*} == ${f%%.*} ]] && [[ ${file_encoding} == ${enc} ]]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} is already encoded with ${enc} and saved as ${file}\n"
					printf "%s\n" "${delimiter}"
					c=1
					break
				fi
			fi
		done
	fi
}

function removeSuffix {
	# Remove "_conv" suffix from filename
	while true; do
		printf "%s\n" "${delimiter}"
		read -p "| [+] Do you want to remove \"_conv\" suffix from the converted files? [Y/N] " choice
		printf "%s\n" "${delimiter}"
		if [[ "${choice}" == "Y" || "${choice}" == "y" ]]; then
			for f in *_conv*; do
				if [ ${f} == "*_conv*" ]; then
					printf "%s\n" "${delimiter}"
					printf "| [+] No files to rename\n"
					printf "%s\n" "${delimiter}"
				else
					ext=${f##*.}
					mv "${f}" "${f/_conv.${ext}/.${ext}}"
					printf "%s\n" "${delimiter}"
					printf "| [+] File ${f} renamed to ${f%%_conv*}.${f##*.}\n"
					printf "%s\n" "${delimiter}"
				fi
			done
			break
		elif [[ "${choice}" == "N" || "${choice}" == "n" ]]; then
			printf "%s\n" "${delimiter}"
			printf "| [+] Quitting...\n"
			printf "%s\n" "${delimiter}"
			break
		fi
	done
}

function deleteOriginal {
	# Delete original video files
	while true; do
		printf "%s\n" "${delimiter}"
		read -p "| [+] Do you want to delete original files? [Y/N] " choice
		printf "%s\n" "${delimiter}"
		if [[ "${choice}" == "Y" || "${choice}" == "y" ]]; then
			for conv in *_conv.mkv; do
				for f in *; do
					conv_name=${conv%%_conv*}
					org_name=${f%%.*}
					org_ext=${f##*.}
					if [[ ${conv_name} == ${org_name} ]] && [[ ${extensions[@]} =~ ${org_ext} ]]; then
						rm ${f}
						printf "%s\n" "${delimiter}"
						printf "[+] File ${f} deleted\n"
						printf "%s\n" "${delimiter}"
						break
					fi
				done
			done
			break
		elif [[ "${choice}" == "N" || "${choice}" == "n" ]]; then
			printf "%s\n" "${delimiter}"
			printf "[+] Keeping the original files\n"
			printf "%s\n" "${delimiter}"
			break
		fi
	done
}

function setEncoder {
	# Choose an encoder
	if [ -z ${enc} ]; then
		PS3="[+] Choose encoder: "
		encoders=("libx264" "libx265")
		select encoder in ${encoders[@]}; do
			case ${encoder} in
				"libx264")
					enc=${encoder}
					break
					;;
				"libx265")
					enc=${encoder}
					break
					;;
				*)
					printf "%s\n" "${delimiter}"
					echo "| [+] No such option ${REPLY}"
					printf "%s\n" "${delimiter}"
					;;
			esac
		done
	fi

	# Print encoder
	printf "%s\n" "${delimiter}"
	printf "| [+] Encoder: ${enc}\n"
	printf "%s\n" "${delimiter}"
}

function chooseExtension {
	# Choose file extension to format
	if [ -z ${ext} ]; then
		# Choose a file extension to convert to
		PS3="[+] Choose file extension to convert to: "
		extensions=("mkv" "mp4" "webm" "avi" "mov" "m4v" "wmv")
		select extension in ${extensions[@]}; do
			case ${extension} in
				"mp4")
					ext=${extension}
					break
					;;
				"mkv")
					ext=${extension}
					break
					;;
				"webm")
					ext=${extension}
					break
					;;
				"avi")
					ext=${extension}
					break
					;;
				*)
					printf "%s\n" "${delimiter}"
					printf "| [+] No such option ${REPLY}\n"
					printf "%s\n" "${delimiter}"
					;;
			esac
		done
	fi

	# Print extension
	printf "%s\n" "${delimiter}"
	printf "| [+] Extension to convert: ${ext}\n"
	printf "%s\n" "${delimiter}"
}

function updateName {
	# Remove special characters from filenames and replace whitespaces with underscores
	$(update-filename)
	printf "%s\n" "${delimiter}"
	printf "| [+] Filenames updated\n"
	printf "%s\n" "${delimiter}"
}

function countEncoded {
	# Print count of encoded files
	printf "%s\n" "${delimiter}"
	printf "| [+] Encoded ${count} files\n"
	printf "%s\n" "${delimiter}"
}

function printTotal {
	# Print total time
	if [[ ${count} -gt 0 ]]; then
		if [[ -z ${total} ]]; then total=0; fi
		total=$(formatTime ${total})
		printf "%s\n" "${delimiter}"
		printf "| [+] All videos encoded in ${total}\n"
		printf "%s\n" "${delimiter}"
	else
		printf "%s\n" "${delimiter}"
		printf "| [+] Time error: no videos encoded\n"
		printf "%s\n" "${delimiter}"
	fi
}

function encodeFiles {
	# Encode all video files
	for f in *; do
		# Get files in current directory
		if [[ -f ${f} ]] && [[ ${f} =~ [A-Za-z0-9_\(\)]\.[A-Za-z0-9]+{3,4} ]]; then
			# Get encoding
			# Split filename
			name=${f%%.*} # Get file name
			ext_orig=${f##*.} # Original file extension
			ext_orig=$(echo ${ext_orig} | tr '[:upper:]' '[:lower:]') # Convert extension to lowercase
			checkConversion "${f}" "${name}" "${ext_orig}"

			# If all checks are passed, convert the video file
			if [[ ${c} == 0 ]]; then
				# Get encoding of a current file
				f_enc=$(exiftool ${f} | grep -E 'Encoding|Encoder' | cut -d ":" -f 2 | cut -d " " -f 3 | tr -d ",")
				if [ -z ${f_enc} ]; then f_enc="None"; fi # Set file encoding as None if no encoding data is found
				printf "| [+] Encoding ${f} (enc: ${f_enc}) to ${name}_conv.${ext} (enc: ${enc})\n"
				loglevel="quiet"
				start=$(date +%s.%3N)
				ffmpeg -stats -loglevel ${loglevel} -i ${f} -c:a ${audio} -c:v ${enc} -x265-params log-level=none -preset ${preset} -crf ${crf} ${name}"_conv".${ext}
				end=$(date +%s.%3N)
				time=$(formatTime $(echo "${end}-${start}" | bc -l))
				printf "%s\n" "${delimiter}"
				printf "| [+] File ${f} (enc: ${f_enc}) encoded to ${name}_conv.${ext} (enc: ${enc}) in ${time}\n"
				printf "%s\n" "${delimiter}"
				total=$(echo "${total} + ${end} - ${start}" | bc -l)
				count=$((++count))
			fi
		fi
	done
}

#  -------------------
# | Dependency checks |
#  -------------------

# Check if ffmpeg is installed
ffmpeg -version 2>/dev/null 1>&2
if [[ ${?} != 0 ]]; then
	printf "%s\n" "${delimiter}"
    printf "| [+] Package ffmpeg is not installed. Terminating script\n" && exit 1
	printf "%s\n" "${delimiter}"
else
	printf "%s\n" "${delimiter}"
	printf "| [+] Package ffmpeg installed\n"
	printf "%s\n" "${delimiter}"
fi

# Check if exiftool is installed
exiftool -ver 2>/dev/null 1>&2
if [[ ${?} != 0 ]]; then
	printf "%s\n" "${delimiter}"
    printf "| [+] Package exiftool is not installed. Terminating script\n" && exit 1
	printf "%s\n" "${delimiter}"
else
	printf "%s\n" "${delimiter}"
	printf "| [+] Package exiftool installed\n"
	printf "%s\n" "${delimiter}"
fi

# Check if bc is installed
bc -v 2>/dev/null 1>&2
if [[ ${?} != 0 ]]; then
	printf "%s\n" "${delimiter}"
	printf "| [+] Package bc is not installed. Terminating script\n" && exit 1
	printf "%s\n" "${delimiter}"
else
	printf "%s\n" "${delimiter}"
	printf "| [+] Package bc installed\n"
	printf "%s\n" "${delimiter}"
fi

#  ------
# | Main |
#  ------

# Total encoding duration
total=0

# Count encoded files
count=0

# Choose an encoder
setEncoder

# Set default parameters for an encoder
if [ ${enc} == "libx264" ]; then
	# Set default parameters for libx264
	setParameters ${enc} "copy" "17"
elif [ ${enc} == "libx265" ]; then
	# Set default parameters for libx265
	setParameters ${enc} "copy" "18"
fi

# Choose an extension
chooseExtension

# Update filename
updateName

# Encode all video files
encodeFiles

# Print count of encoded files
countEncoded

# Print total time
printTotal

# Remove original video files
deleteOriginal

# Remove "_conv" suffix from filenames (optional)
removeSuffix
